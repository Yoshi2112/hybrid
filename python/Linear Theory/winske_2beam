# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

import numpy as np
from scipy.special import wofz as faddeeva_function
import scipy.optimize as opt

# =============================================================================
# def cyclotron_frequency(qi, Bi, mi, radians=True):
#     if radians == True:
#         return (qi * Bi / mi)
#     else:
#         return (qi * Bi / (2 * np.pi * mi))
#
# def plasma_frequency(qi, ni, mi, radians=True):
#     if radians == True:
#         return np.sqrt(ni * (qi ** 2) / (mi * e0))
#     else:
#         return np.sqrt(ni * (qi ** 2) / (2 * np.pi * mi * e0))
# =============================================================================

def wc(qi, Bi, mi):
    return qi * Bi / (mi * c)

def wp(qi, ni, mi):
    return np.sqrt(4 * np.pi * (qi ** 2) * ni / mi)

def dispersion_function(w, k):
    return w ** 2 + (k*c) ** 2

if __name__ == '__main__':
    e0  = 8.854e-12
    mu0 = (4e-7) * np.pi
    mp  = 1.67e-27
    q   = 1.602e-19
    c   = 3e8

    B0  = 4e-9
    ne  = 8.48e6
    va  = B0 / np.sqrt(mu0 * ne * mp)

    mass     = [1. / 1836, 1., 1.] * mp
    charge   = [-1,        1., 1.] * q
    density  = [1., 0.985, 0.015]  * ne
    velocity = [-0.15, 0., 10.]    * va

    n_species = len(mass)

    kmin = 0
    kmax = 1.

    k    = np.linspace(kmin, kmax, 100)
    sol  = np.zeros(k.shape[0])

    for ii in range(k.shape[0]):
        sol[ii] =opt.fsolve


